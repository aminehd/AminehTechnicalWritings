{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PAsAEW60Z0U9",
        "outputId": "6b20892d-a0c2-40f2-850e-b906d554fd18"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "remote: Enumerating objects: 7, done.\u001b[K\n",
            "remote: Counting objects:  14% (1/7)\u001b[K\rremote: Counting objects:  28% (2/7)\u001b[K\rremote: Counting objects:  42% (3/7)\u001b[K\rremote: Counting objects:  57% (4/7)\u001b[K\rremote: Counting objects:  71% (5/7)\u001b[K\rremote: Counting objects:  85% (6/7)\u001b[K\rremote: Counting objects: 100% (7/7)\u001b[K\rremote: Counting objects: 100% (7/7), done.\u001b[K\n",
            "remote: Compressing objects:  25% (1/4)\u001b[K\rremote: Compressing objects:  50% (2/4)\u001b[K\rremote: Compressing objects:  75% (3/4)\u001b[K\rremote: Compressing objects: 100% (4/4)\u001b[K\rremote: Compressing objects: 100% (4/4), done.\u001b[K\n",
            "remote: Total 4 (delta 3), reused 0 (delta 0), pack-reused 0\u001b[K\n",
            "Unpacking objects:  25% (1/4)\rUnpacking objects:  50% (2/4)\rUnpacking objects:  75% (3/4)\rUnpacking objects: 100% (4/4)\rUnpacking objects: 100% (4/4), 986 bytes | 986.00 KiB/s, done.\n",
            "From https://github.com/aminehd/AminehTechnicalWritings\n",
            "   ac311bf..a059440  main       -> origin/main\n",
            "Updating ac311bf..a059440\n",
            "Fast-forward\n",
            " src/sampling_utils.py | 2 \u001b[32m+\u001b[m\u001b[31m-\u001b[m\n",
            " 1 file changed, 1 insertion(+), 1 deletion(-)\n",
            "/bin/bash: -c: line 1: unexpected EOF while looking for matching `\"'\n",
            "/bin/bash: -c: line 2: syntax error: unexpected end of file\n"
          ]
        }
      ],
      "source": [
        "import google.colab\n",
        "repo_path = 'AminehTechnicalWritings'\n",
        "!git -C $repo_path pull origin || git clone https://github.com/aminehd/AminehTechnicalWritings/ $repo_path\n",
        "local_clone = '/content/' + repo_path\n",
        "!git config --global user.email \"amineh.dadsetan@gmail.com\"\n",
        "!git config --global user.name \"Amineh Dadsetan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S_orVC2KZ0U9",
        "outputId": "8e569c09-11df-4f5b-ff7a-616d65d75391"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The autoreload extension is already loaded. To reload it, use:\n",
            "  %reload_ext autoreload\n",
            "The autoreload extension is already loaded. To reload it, use:\n",
            "  %reload_ext autoreload\n"
          ]
        }
      ],
      "source": [
        "%load_ext autoreload\n",
        "%autoreload 2\n",
        "# Import utility functions that provide answers to challenges\n",
        "%load_ext autoreload\n",
        "\n",
        "\n",
        "import sys\n",
        "sys.path.insert(1, '/content/AminehTechnicalWritings/src')\n",
        "\n",
        "%aimport sampling_utils\n",
        "\n",
        "import sampling_utils as su\n",
        "import numpy as np\n",
        "from sampling_utils import Population\n",
        "import pandas as pd\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage:\n",
        "builder = Population.Builder(num_samples=1000)\n",
        "population = (builder\n",
        "              .add_predictor('X1', range(0, 4), 2.5)\n",
        "              .add_predictor('X2', range(5, 7), -1.2)\n",
        "              .add_predictor('X3', range(5, 9), -1.2)\n",
        "              .set_intercept(4)\n",
        "              .set_noise(2)\n",
        "              .build())\n",
        "print(population.predictor_mesh)\n",
        "df = population.generate_data()\n",
        "# print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5F7Os22alwFN",
        "outputId": "8d0464a3-d786-4fe1-96ad-b05aed4f5ebe"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[(0, 5, 5) (0, 5, 6) (0, 5, 7) (0, 5, 8)]\n",
            "  [(0, 6, 5) (0, 6, 6) (0, 6, 7) (0, 6, 8)]]\n",
            "\n",
            " [[(1, 5, 5) (1, 5, 6) (1, 5, 7) (1, 5, 8)]\n",
            "  [(1, 6, 5) (1, 6, 6) (1, 6, 7) (1, 6, 8)]]\n",
            "\n",
            " [[(2, 5, 5) (2, 5, 6) (2, 5, 7) (2, 5, 8)]\n",
            "  [(2, 6, 5) (2, 6, 6) (2, 6, 7) (2, 6, 8)]]\n",
            "\n",
            " [[(3, 5, 5) (3, 5, 6) (3, 5, 7) (3, 5, 8)]\n",
            "  [(3, 6, 5) (3, 6, 6) (3, 6, 7) (3, 6, 8)]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ekCOF3Ub93jT"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}